import scipy as scp
"""def ImpliedVolatility(marketPrice,K,T,S0_,r):
    func = lambda sigma: np.power(call_BS(K,S0_,r,sigma,T)-marketPrice,1.0)
    impliedVol = scp.optimize.brent(func,brack=(0.05,0.9))
    return impliedVol"""


def CallPutOptionPriceCOSMthd(cf,S0,r,tau,K,N,L):
    if K is not np.array:
        K = np.array(K).reshape([len(K),1])
        
    i = np.complex(0.0,1.0)
    x0 = np.log(S0/K)
    a = 0.0 - L * np.sqrt(tau)
    b = 0.0 + L * np.sqrt(tau)
    
    k = np.linspace(0,N-1,N).reshape([N,1])
    u = k*np.pi / (b-a)
    
    H_k = CallPutCoefficients(a,b,k)
    mat = np.exp(i * np.outer((x0-a),u))
    temp = cf(u) * H_k
    temp[0] = 0.5 * temp[0]
    value = np.exp(-r*tau) * K * np.real(mat.dot(temp))
    return value

def CallPutCoefficients(a,b,k):
    c = 0.0
    d = b
    coef = Chi_Psi(a,b,c,d,k)
    Chi_k = coef["chi"]
    Psi_k = coef["psi"]
    if a < b and b < .0:
        H_k = np.zeros([len(k),1])
    else:
        H_k = 2.0 /(b-a)*(Chi_k - Psi_k)
    return H_k

def Chi_Psi(a,b,c,d,k):
    psi = np.sin(k*np.pi*(d-a)/(b-a)) - np.sin(k*np.pi*(c-a)/(b-a))
    psi[1:] = psi[1:] *(b-a)/(k[1:]*np.pi)
    psi[0] = d-c
    
    chi = 1.0/(1.0 + np.power((k*np.pi / (b-a)),2.0))
    expr1 = np.cos(k*np.pi*(d-a)/(b-a))*np.exp(d) - np.cos(k*np.pi*(c-a)/(b-a))*np.exp(c)
    expr2 = k*np.pi / (b-a)*np.sin(k*np.pi*(d-a)/(b-a)) - k*np.pi/(b-a)*np.sin(k*np.pi*(c-a)/(b-a))*np.exp(c)
    chi = chi * (expr1 + expr2)
    
    value = {'chi':chi,'psi':psi}
    return value

def ChFhestonModel(r,tau,kappa,gamma,vbar,v0,rho):
    i = np.complex(0.0,1.0)
    D1 = lambda u : np.sqrt(np.power(kappa-gamma*rho*i*u,2)+(u*u+i*u)*gamma*gamma)
    g = lambda u : (kappa - gamma*rho*i*u - D1(u))/(kappa-gamma*rho*i*u+D1(u))
    C = lambda u : (1.0-np.exp(-D1(u)*tau))/(gamma*gamma*(1.0-g(u)*np.exp(-D1(u)*tau)))*(kappa-gamma*rho*i*u-D1(u))
    
    A = lambda u: r*i*u*tau+kappa*vbar*tau/gamma/gamma * (kappa-gamma*rho*i*u-D1(u)) - 2*kappa*vbar/gamma/gamma*np.log((1.0-g(u)*np.exp(-D1(u)*tau))/(1.0-g(u)))
    
    cf = lambda u : np.exp(A(u) + C(u)*v0)
    return cf


def ImpliedVolatility(marketPrice,K,T,S0_,r):
    sigmaGrid = np.linspace(0,2,250)
    optPriceGrid = call_BS(K,S0_,r,sigmaGrid,T)
    sigmaInitial = np.interp(marketPrice,optPriceGrid,sigmaGrid)
    
    func = lambda sigma: np.power(call_BS(K,S0_,r,sigma,T)-marketPrice,1.0)
    impliedVol = scp.optimize.newton(func,sigmaInitial,tol=1**(-1))
    return impliedVol
    
    
    input_ = []
heston_output = []
prediction = []
tauV = [1/48,1/12,1/2,1,2,5,8,10]
K = [100]
K = np.array(K).reshape([len(K),1])
for i, tau in enumerate(tauV):
    cf = ChFhestonModel(0.05,j,0.7,0.01,0.5,0.04,-0.7)
    c = CallPutOptionPriceCOSMthd(cf,100,0.05,j,K,5000,5)
        #K_=i,alpha_=1.,r_=0.05,tau_=j,kappa_=2,S0_=1,theta_=0.04,rho_=-0.7,sigma_=0.5,V0_=0.04,L_=50)
        #c = price_heston_mc(kappa_=2,theta_=0.04,sigma_=0.5,rho_=-0.7,r_=0.05,T_=j,L_=100,V0_=0.04,S0_=1,K0_=i,N_=10000)
        #c = Pricer_Lifted_Heston(K_=i,r_=0.05,S0=1,T=j,rho=-0.7,lamb=2,nu=0.2,theta=0.04,V0=0.04,N=20,rN=2.5,alpha=0.6,M=200,L_=50) 
    heston_output.append(c)
    input_.append([i,j,c]) 
input_ = np.array(input_)

IV = np.zeros([len(tauV),1])
for idx in range(0,len(tauV)):
    IV[idx] = ImpliedVolatility(heston_output[idx],K[0],tauV[idx],100,0.05)
plt.plot(tauV,IV*100)
